{"version":3,"sources":["Screen/Screen.jsx","Screen/ScreenContainer.jsx","ServerSelect/ServerSelect.jsx","ServerSelect/ServerSelectContainer.jsx","StatusBar/StatusBar.jsx","Input/Input.jsx","util/toAnsi.jsx","App.jsx","registerServiceWorker.js","index.js","logo.png"],"names":["getStyle","context","fontFamily","fontSize","Screen","props","className","style","ref","screenRef","buffer","ScreenContainer","screen","React","createRef","this","current","scrollTop","scrollHeight","Component","ServerSelect","servers","map","host","port","name","key","value","onChange","serverSelect","type","onClick","serverConnect","status","ServerSelectContainer","state","selectedServer","event","console","log","onServerConnect","target","setState","onServerSelect","getStatus","statusData","color","error","Icon","size","title","children","width","height","viewBox","jsx","defaultProps","StatusBar","cx","cy","r","Input","history","cursor","input","preventDefault","sendMessage","length","setTimeout","setSelectionRange","keyCode","Math","max","updateValue","min","onSubmit","handleSubmit","autoFocus","autoComplete","autoCapitalize","autoCorrect","spellCheck","echo","handleChange","onKeyDown","handleKey","toAnsi","message","uuid","toString","App","id","cookies","get","set","socket","SocketIO","process","on","data","onData","onControl","onBackLog","onStatus","onServers","command","onGMCP","oldState","emit","clientId","src","logo","alt","server","connectServer","withCookies","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","response","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.8ee3033a.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Screen.css\";\n\nconst getStyle = context => ({\n    fontFamily: context.fontFamily,\n    fontSize: context.fontSize\n});\n\nconst Screen = (props, context) => (\n    <div className=\"Screen\" style={getStyle(context)} ref={props.screenRef}>\n        <p>{props.buffer}</p>\n    </div>\n);\n\nScreen.propTypes = {\n    buffer: PropTypes.arrayOf(PropTypes.node).isRequired,\n    screenRef: PropTypes.shape({ value: PropTypes.instanceOf(HTMLDivElement) }).isRequired\n};\n\nexport default Screen;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Screen from \"./Screen\";\n\nclass ScreenContainer extends Component {\n    componentDidUpdate() {\n        // console.log(\"componentDidUpdate\", \"buffer length:\", this.props.buffer.length);\n        this.screen.current.scrollTop = this.screen.current.scrollHeight;\n    }\n\n    screen = React.createRef();\n\n    render() {\n        return <Screen buffer={this.props.buffer} screenRef={this.screen} />;\n    }\n}\n\nScreenContainer.propTypes = {\n    buffer: PropTypes.arrayOf(PropTypes.node).isRequired\n};\n\nexport default ScreenContainer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ServerSelect = props => {\n    const servers = props.servers.map(({ host, port, name }) => (\n        <option key={name} value={name}>\n            {name} - {host}:{port}\n        </option>\n    ));\n    return (\n        <div className=\"serverSelect\">\n            <select name=\"server\" onChange={props.serverSelect}>{servers}</select>\n            <input type=\"submit\" onClick={props.serverConnect} value={props.status === \"connect\" ? \"Disconnect\" : \"Connect\"} />\n        </div>\n    );\n};\n\nServerSelect.propTypes = {\n    servers: PropTypes.arrayOf(\n        PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            host: PropTypes.string.isRequired,\n            port: PropTypes.number.isRequired\n        })\n    ).isRequired,\n    serverSelect: PropTypes.func.isRequired,\n    serverConnect: PropTypes.func.isRequired,\n    status: PropTypes.string.isRequired\n};\n\nexport default ServerSelect;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport ServerSelect from \"./ServerSelect\";\n\nclass ServerSelectContainer extends React.Component {\n    state = {\n        selectedServer: ''\n    };\n\n\n    onServerConnect(event) {\n        console.log(\"onServerConnect\", event);\n        if (this.state.selectedServer) {\n            this.props.onServerConnect(this.state.selectedServer);    \n            return;\n        }\n        this.props.onServerConnect(this.props.servers[0].name);\n    }\n\n    onServerSelect(event) {\n        console.log('onServerSelect', event.target.value);\n        this.setState({\n            selectedServer: event.target.value\n        })\n    }\n\n    render() {\n        return (\n            <ServerSelect\n                serverConnect={(event) => this.onServerConnect(event)}\n                serverSelect={(event) => this.onServerSelect(event)}\n                status={this.props.status}\n                servers={this.props.servers}\n            />\n        );\n    }\n}\nServerSelectContainer.propTypes = {\n    servers: PropTypes.arrayOf(\n        PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            host: PropTypes.string.isRequired,\n            port: PropTypes.number.isRequired\n        })\n    ).isRequired,\n    onServerConnect: PropTypes.func.isRequired,\n    status: PropTypes.string.isRequired\n};\n\nexport default ServerSelectContainer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./StatusBar.css\";\n\nconst getStatus = (status, statusData) => {\n    // console.log(status, statusData);\n    switch (status) {\n        case \"connecting\":\n            return {\n                color: \"yellow\",\n                status: \"Connecting..\"\n            };\n        case \"error\":\n            return {\n                color: \"red\",\n                status: `Error: ${statusData.error}`\n            };\n        case \"connect\":\n            return {\n                color: \"lightgreen\",\n                status: \"Connected\"\n            };\n        case \"close\":\n            return {\n                color: \"red\",\n                status: \"Disconnected\"\n            };\n        default:\n            return {\n                color: \"white\",\n                status\n            };\n    }\n};\n\nconst Icon = ({ size = \"1em\", color = \"currentColor\", title, children }) => (\n    <svg width={size} height={size} viewBox=\"0 0 32 32\">\n        <title>{title}</title>\n        {children}\n        <style jsx=\"true\">\n            {`\n                svg {\n                    vertical-align: middle;\n                    fill: ${color};\n                }\n            `}\n        </style>\n    </svg>\n);\n\nIcon.propTypes = {\n    size: PropTypes.string,\n    color: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired\n};\n\nIcon.defaultProps = {\n    size: \"1em\",\n    color: \"currentColor\"\n};\n\nconst StatusBar = props => (\n    <div>\n        <span>\n            <Icon\n                title={getStatus(props.status, props.statusData).status}\n                color={getStatus(props.status, props.statusData).color}\n            >\n                <circle cx=\"16\" cy=\"16\" r=\"16\" />\n            </Icon>\n            {getStatus(props.status, props.statusData).status}\n        </span>\n    </div>\n);\n\nStatusBar.defaultProps = {\n    statusData: {}\n};\nStatusBar.propTypes = {\n    status: PropTypes.string.isRequired,\n    statusData: PropTypes.shape({\n        hadError: PropTypes.bool\n    })\n};\n\nexport default StatusBar;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Input.css\";\n\nconst UP_ARROW = 38;\nconst DOWN_ARROW = 40;\n\nclass Input extends Component {\n    state = { value: \"\" };\n    history = [];\n    cursor = 0;\n    buffer = \"\";\n\n    input = React.createRef();\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.props.sendMessage(this.state.value);\n        if (this.state.value === \"\") {\n            return;\n        }\n        this.history = [...this.history, this.state.value];\n        this.cursor = this.history.length;\n        this.setState({ value: \"\" });\n    }\n\n    handleChange(event) {\n        this.buffer = event.target.value;\n        this.setState({ value: event.target.value });\n    }\n\n    updateValue() {\n        const value = this.cursor === this.history.length ? this.buffer : this.history[this.cursor]\n        this.setState({value});\n        setTimeout(() => {\n            this.input.current.setSelectionRange(0, value.length);\n        }, 0);\n        \n    }\n\n    handleKey(event) {\n        switch (event.keyCode) {\n            case UP_ARROW:\n                this.cursor = Math.max(this.cursor - 1, 0);\n                this.updateValue();\n                event.preventDefault();\n                break;\n            case DOWN_ARROW:\n                this.cursor = Math.min(this.cursor + 1, this.history.length);\n                this.updateValue();\n                event.preventDefault();\n                break;\n            default:\n                break;\n        }\n    }\n\n    render() {\n        return (\n            <form onSubmit={event => this.handleSubmit(event)}>\n                <input\n                    autoFocus // eslint-disable-line jsx-a11y/no-autofocus\n                    className=\"InputBar\"\n                    autoComplete=\"off\"\n                    autoCapitalize=\"off\"\n                    autoCorrect=\"off\"\n                    spellCheck=\"false\"\n                    type={this.props.echo ? \"text\" : \"password\"}\n                    ref={this.input}\n                    value={this.state.value}\n                    onChange={event => this.handleChange(event)}\n                    onKeyDown={event => this.handleKey(event)}\n                />\n            </form>\n        );\n    }\n}\n\nInput.propTypes = {\n    sendMessage: PropTypes.func.isRequired,\n    echo: PropTypes.bool.isRequired\n};\n\nexport default Input;\n","import React from \"react\";\n\nimport uuid from \"uuid/v4\";\nimport Ansi from \"ansi-to-react\";\n\nconst toAnsi = message => <Ansi key={uuid()}>{`${message.toString()}`}</Ansi>;\nexport default toAnsi;\n","import React, { Component } from \"react\";\nimport SocketIO from \"socket.io-client\";\nimport PropTypes from \"prop-types\";\nimport uuid from \"uuid/v4\";\n// import update from \"immutability-helper\";\n\nimport { withCookies, Cookies } from \"react-cookie\";\n\nimport \"./App.css\";\n\nimport ScreenContainer from \"./Screen/ScreenContainer\";\nimport ServerSelectContainer from \"./ServerSelect/ServerSelectContainer\";\nimport StatusBar from \"./StatusBar/StatusBar\";\nimport Input from \"./Input/Input\";\nimport logo from \"./logo.png\";\n\nimport toAnsi from \"./util/toAnsi\";\n\nconst socketURL = process.env.REACT_APP_SOCKET_URL\n  ? process.env.REACT_APP_SOCKET_URL\n  : \"ws://localhost:8080\";\n\nclass App extends Component {\n  static propTypes = {\n    cookies: PropTypes.instanceOf(Cookies).isRequired\n  };\n\n  state = {\n    buffer: [],\n    servers: [],\n    status: \"closed\",\n    echo: true,\n    statusData: {}\n  };\n\n  componentDidMount() {\n    this.id = this.props.cookies.get(\"id\");\n    if (!this.id) {\n      this.id = uuid();\n      this.props.cookies.set(\"id\", this.id);\n    }\n    console.log(\"Client ID: \", this.id);\n\n    const socket = new SocketIO(`${socketURL}?token=${this.id}`);\n    socket.on(\"clientData\", data => this.onData(data));\n    socket.on(\"clientControl\", event => this.onControl(event));\n    socket.on(\"backLog\", data => this.onBackLog(data));\n    socket.on(\"status\", ({ status, data }) => this.onStatus(status, data));\n    socket.on(\"servers\", servers => this.onServers(servers));\n    socket.on(\"echo\", echo => this.setState({ echo }));\n    socket.on(\"GMCP\", ([command, data]) => this.onGMCP(command, data));\n    this.socket = socket;\n  }\n\n  onBackLog(data) {\n    const buffer = data.map(message => toAnsi(message));\n    this.setState({ buffer });\n  }\n\n  onData(data) {\n    this.setState(oldState => ({\n      buffer: [...oldState.buffer, toAnsi(data)]\n    }));\n  }\n\n  onServers(servers) {\n    console.log(\"onServers\", servers);\n    this.setState({ servers });\n  }\n\n  onStatus(status, statusData) {\n    console.log(\"onStatus\", status, statusData);\n    this.setState({ status, statusData });\n  }\n\n  onGMCP(command, data) {\n    console.log(\"onGMCP\", command, data);\n    // this;\n  }\n\n  connectServer(name) {\n    console.log(\"connectServer\", name, this.state.status);\n    if (this.state.status === \"connect\") {\n      this.socket.emit(\"disconnectServer\", name);\n      return;\n    }\n    this.socket.emit(\"connectServer\", name);\n  }\n\n  sendMessage(message) {\n    if (this.state.echo) {\n      this.setState(oldState => ({\n        buffer: [...oldState.buffer, toAnsi(`\\r\\n${message}\\r\\n`)]\n      }));\n    }\n    this.socket.emit(\"send\", {\n      clientId: this.state.clientId,\n      message: `${message}\\r\\n`\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          {this.state.servers.length > 0 && (\n            <ServerSelectContainer\n              onServerConnect={server => this.connectServer(server)}\n              servers={this.state.servers}\n              status={this.state.status}\n            />\n          )}\n          <StatusBar\n            status={this.state.status}\n            statusData={this.state.statusData}\n          />\n        </header>\n        <ScreenContainer buffer={this.state.buffer} />\n        <Input\n          sendMessage={message => this.sendMessage(message)}\n          echo={this.state.echo}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withCookies(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CookiesProvider } from 'react-cookie';\n\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(<CookiesProvider><App /></CookiesProvider>, document.getElementById('root'));\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/logo.978474bc.png\";"],"sourceRoot":""}